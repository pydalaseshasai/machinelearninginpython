{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "076b63a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn import metrics\n",
    "from sklearn import preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "567d1224",
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_csv('https://raw.githubusercontent.com/Premalatha-success/Datasets/main/h1n1_vaccine_prediction.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "83a5ebfe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(26707, 34)"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "cda5fd4e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>unique_id</th>\n",
       "      <th>h1n1_worry</th>\n",
       "      <th>h1n1_awareness</th>\n",
       "      <th>antiviral_medication</th>\n",
       "      <th>contact_avoidance</th>\n",
       "      <th>bought_face_mask</th>\n",
       "      <th>wash_hands_frequently</th>\n",
       "      <th>avoid_large_gatherings</th>\n",
       "      <th>reduced_outside_home_cont</th>\n",
       "      <th>avoid_touch_face</th>\n",
       "      <th>dr_recc_h1n1_vacc</th>\n",
       "      <th>dr_recc_seasonal_vacc</th>\n",
       "      <th>chronic_medic_condition</th>\n",
       "      <th>cont_child_undr_6_mnths</th>\n",
       "      <th>is_health_worker</th>\n",
       "      <th>has_health_insur</th>\n",
       "      <th>is_h1n1_vacc_effective</th>\n",
       "      <th>is_h1n1_risky</th>\n",
       "      <th>sick_from_h1n1_vacc</th>\n",
       "      <th>is_seas_vacc_effective</th>\n",
       "      <th>is_seas_risky</th>\n",
       "      <th>sick_from_seas_vacc</th>\n",
       "      <th>age_bracket</th>\n",
       "      <th>qualification</th>\n",
       "      <th>race</th>\n",
       "      <th>sex</th>\n",
       "      <th>income_level</th>\n",
       "      <th>marital_status</th>\n",
       "      <th>housing_status</th>\n",
       "      <th>employment</th>\n",
       "      <th>census_msa</th>\n",
       "      <th>no_of_adults</th>\n",
       "      <th>no_of_children</th>\n",
       "      <th>h1n1_vaccine</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>55 - 64 Years</td>\n",
       "      <td>&lt; 12 Years</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>Below Poverty</td>\n",
       "      <td>Not Married</td>\n",
       "      <td>Own</td>\n",
       "      <td>Not in Labor Force</td>\n",
       "      <td>Non-MSA</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>35 - 44 Years</td>\n",
       "      <td>12 Years</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>Below Poverty</td>\n",
       "      <td>Not Married</td>\n",
       "      <td>Rent</td>\n",
       "      <td>Employed</td>\n",
       "      <td>MSA, Not Principle  City</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>18 - 34 Years</td>\n",
       "      <td>College Graduate</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>&lt;= $75,000, Above Poverty</td>\n",
       "      <td>Not Married</td>\n",
       "      <td>Own</td>\n",
       "      <td>Employed</td>\n",
       "      <td>MSA, Not Principle  City</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>65+ Years</td>\n",
       "      <td>12 Years</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>Below Poverty</td>\n",
       "      <td>Not Married</td>\n",
       "      <td>Rent</td>\n",
       "      <td>Not in Labor Force</td>\n",
       "      <td>MSA, Principle City</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>45 - 54 Years</td>\n",
       "      <td>Some College</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>&lt;= $75,000, Above Poverty</td>\n",
       "      <td>Married</td>\n",
       "      <td>Own</td>\n",
       "      <td>Employed</td>\n",
       "      <td>MSA, Not Principle  City</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   unique_id  h1n1_worry  h1n1_awareness  antiviral_medication  \\\n",
       "0          0         1.0             0.0                   0.0   \n",
       "1          1         3.0             2.0                   0.0   \n",
       "2          2         1.0             1.0                   0.0   \n",
       "3          3         1.0             1.0                   0.0   \n",
       "4          4         2.0             1.0                   0.0   \n",
       "\n",
       "   contact_avoidance  bought_face_mask  wash_hands_frequently  \\\n",
       "0                0.0               0.0                    0.0   \n",
       "1                1.0               0.0                    1.0   \n",
       "2                1.0               0.0                    0.0   \n",
       "3                1.0               0.0                    1.0   \n",
       "4                1.0               0.0                    1.0   \n",
       "\n",
       "   avoid_large_gatherings  reduced_outside_home_cont  avoid_touch_face  \\\n",
       "0                     0.0                        1.0               1.0   \n",
       "1                     0.0                        1.0               1.0   \n",
       "2                     0.0                        0.0               0.0   \n",
       "3                     1.0                        0.0               0.0   \n",
       "4                     1.0                        0.0               1.0   \n",
       "\n",
       "   dr_recc_h1n1_vacc  dr_recc_seasonal_vacc  chronic_medic_condition  \\\n",
       "0                0.0                    0.0                      0.0   \n",
       "1                0.0                    0.0                      0.0   \n",
       "2                NaN                    NaN                      1.0   \n",
       "3                0.0                    1.0                      1.0   \n",
       "4                0.0                    0.0                      0.0   \n",
       "\n",
       "   cont_child_undr_6_mnths  is_health_worker  has_health_insur  \\\n",
       "0                      0.0               0.0               1.0   \n",
       "1                      0.0               0.0               1.0   \n",
       "2                      0.0               0.0               NaN   \n",
       "3                      0.0               0.0               NaN   \n",
       "4                      0.0               0.0               NaN   \n",
       "\n",
       "   is_h1n1_vacc_effective  is_h1n1_risky  sick_from_h1n1_vacc  \\\n",
       "0                     3.0            1.0                  2.0   \n",
       "1                     5.0            4.0                  4.0   \n",
       "2                     3.0            1.0                  1.0   \n",
       "3                     3.0            3.0                  5.0   \n",
       "4                     3.0            3.0                  2.0   \n",
       "\n",
       "   is_seas_vacc_effective  is_seas_risky  sick_from_seas_vacc    age_bracket  \\\n",
       "0                     2.0            1.0                  2.0  55 - 64 Years   \n",
       "1                     4.0            2.0                  4.0  35 - 44 Years   \n",
       "2                     4.0            1.0                  2.0  18 - 34 Years   \n",
       "3                     5.0            4.0                  1.0      65+ Years   \n",
       "4                     3.0            1.0                  4.0  45 - 54 Years   \n",
       "\n",
       "      qualification   race     sex               income_level marital_status  \\\n",
       "0        < 12 Years  White  Female              Below Poverty    Not Married   \n",
       "1          12 Years  White    Male              Below Poverty    Not Married   \n",
       "2  College Graduate  White    Male  <= $75,000, Above Poverty    Not Married   \n",
       "3          12 Years  White  Female              Below Poverty    Not Married   \n",
       "4      Some College  White  Female  <= $75,000, Above Poverty        Married   \n",
       "\n",
       "  housing_status          employment                census_msa  no_of_adults  \\\n",
       "0            Own  Not in Labor Force                   Non-MSA           0.0   \n",
       "1           Rent            Employed  MSA, Not Principle  City           0.0   \n",
       "2            Own            Employed  MSA, Not Principle  City           2.0   \n",
       "3           Rent  Not in Labor Force       MSA, Principle City           0.0   \n",
       "4            Own            Employed  MSA, Not Principle  City           1.0   \n",
       "\n",
       "   no_of_children  h1n1_vaccine  \n",
       "0             0.0             0  \n",
       "1             0.0             0  \n",
       "2             0.0             0  \n",
       "3             0.0             0  \n",
       "4             0.0             0  "
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "586ccb98",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "unique_id                      int64\n",
       "h1n1_worry                   float64\n",
       "h1n1_awareness               float64\n",
       "antiviral_medication         float64\n",
       "contact_avoidance            float64\n",
       "bought_face_mask             float64\n",
       "wash_hands_frequently        float64\n",
       "avoid_large_gatherings       float64\n",
       "reduced_outside_home_cont    float64\n",
       "avoid_touch_face             float64\n",
       "dr_recc_h1n1_vacc            float64\n",
       "dr_recc_seasonal_vacc        float64\n",
       "chronic_medic_condition      float64\n",
       "cont_child_undr_6_mnths      float64\n",
       "is_health_worker             float64\n",
       "has_health_insur             float64\n",
       "is_h1n1_vacc_effective       float64\n",
       "is_h1n1_risky                float64\n",
       "sick_from_h1n1_vacc          float64\n",
       "is_seas_vacc_effective       float64\n",
       "is_seas_risky                float64\n",
       "sick_from_seas_vacc          float64\n",
       "age_bracket                   object\n",
       "qualification                 object\n",
       "race                          object\n",
       "sex                           object\n",
       "income_level                  object\n",
       "marital_status                object\n",
       "housing_status                object\n",
       "employment                    object\n",
       "census_msa                    object\n",
       "no_of_adults                 float64\n",
       "no_of_children               float64\n",
       "h1n1_vaccine                   int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "84388770",
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.options.display.max_columns=None\n",
    "pd.options.display.min_rows=None\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "8a6dfe58",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "unique_id                        0\n",
       "h1n1_worry                      92\n",
       "h1n1_awareness                 116\n",
       "antiviral_medication            71\n",
       "contact_avoidance              208\n",
       "bought_face_mask                19\n",
       "wash_hands_frequently           42\n",
       "avoid_large_gatherings          87\n",
       "reduced_outside_home_cont       82\n",
       "avoid_touch_face               128\n",
       "dr_recc_h1n1_vacc             2160\n",
       "dr_recc_seasonal_vacc         2160\n",
       "chronic_medic_condition        971\n",
       "cont_child_undr_6_mnths        820\n",
       "is_health_worker               804\n",
       "has_health_insur             12274\n",
       "is_h1n1_vacc_effective         391\n",
       "is_h1n1_risky                  388\n",
       "sick_from_h1n1_vacc            395\n",
       "is_seas_vacc_effective         462\n",
       "is_seas_risky                  514\n",
       "sick_from_seas_vacc            537\n",
       "age_bracket                      0\n",
       "qualification                 1407\n",
       "race                             0\n",
       "sex                              0\n",
       "income_level                  4423\n",
       "marital_status                1408\n",
       "housing_status                2042\n",
       "employment                    1463\n",
       "census_msa                       0\n",
       "no_of_adults                   249\n",
       "no_of_children                 249\n",
       "h1n1_vaccine                     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "4503ad4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['h1n1_worry']=df['h1n1_worry'].replace(to_replace='0',value=np.nan)\n",
    "df['h1n1_worry']=df['h1n1_worry'].astype(float)\n",
    "mean=df['h1n1_worry'].mean()\n",
    "df['h1n1_worry'].replace(np.nan,mean,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "d13fabbc",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['h1n1_awareness']=df['h1n1_awareness'].replace(to_replace='0',value=np.nan)\n",
    "df['h1n1_awareness']=df['h1n1_awareness'].astype(float)\n",
    "mean=df['h1n1_awareness'].mean()\n",
    "df['h1n1_awareness'].replace(np.nan,mean,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "505b61e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['antiviral_medication']=df['antiviral_medication'].replace(to_replace='0',value=np.nan)\n",
    "df['antiviral_medication']=df['antiviral_medication'].astype(float)\n",
    "mean=df['antiviral_medication'].mean()\n",
    "df['antiviral_medication'].replace(np.nan,mean,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "e738db13",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['contact_avoidance']=df['contact_avoidance'].replace(to_replace='0',value=np.nan)\n",
    "df['contact_avoidance']=df['contact_avoidance'].astype(float)\n",
    "mean=df['contact_avoidance'].mean()\n",
    "df['contact_avoidance'].replace(np.nan,mean,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "73387641",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['bought_face_mask']=df['bought_face_mask'].replace(to_replace='0',value=np.nan)\n",
    "df['bought_face_mask']=df['bought_face_mask'].astype(float)\n",
    "mean=df['bought_face_mask'].mean()\n",
    "df['bought_face_mask'].replace(np.nan,mean,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "917a35fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['wash_hands_frequently']=df['wash_hands_frequently'].replace(to_replace='0',value=np.nan)\n",
    "df['wash_hands_frequently']=df['wash_hands_frequently'].astype(float)\n",
    "mean=df['wash_hands_frequently'].mean()\n",
    "df['wash_hands_frequently'].replace(np.nan,mean,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "d6b00f5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['avoid_large_gatherings']=df['avoid_large_gatherings'].replace(to_replace='0',value=np.nan)\n",
    "df['avoid_large_gatherings']=df['avoid_large_gatherings'].astype(float)\n",
    "mean=df['avoid_large_gatherings'].mean()\n",
    "df['avoid_large_gatherings'].replace(np.nan,mean,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "78320636",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['reduced_outside_home_cont']=df['reduced_outside_home_cont'].replace(to_replace='0',value=np.nan)\n",
    "df['reduced_outside_home_cont']=df['reduced_outside_home_cont'].astype(float)\n",
    "mean=df['reduced_outside_home_cont'].mean()\n",
    "df['reduced_outside_home_cont'].replace(np.nan,mean,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "690e5b17",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['avoid_touch_face']=df['avoid_touch_face'].replace(to_replace='0',value=np.nan)\n",
    "df['avoid_touch_face']=df['avoid_touch_face'].astype(float)\n",
    "mean=df['avoid_touch_face'].mean()\n",
    "df['avoid_touch_face'].replace(np.nan,mean,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "3bcccec4",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['dr_recc_h1n1_vacc']=df['dr_recc_h1n1_vacc'].replace(to_replace='0',value=np.nan)\n",
    "df['dr_recc_h1n1_vacc']=df['dr_recc_h1n1_vacc'].astype(float)\n",
    "mean=df['dr_recc_h1n1_vacc'].mean()\n",
    "df['dr_recc_h1n1_vacc'].replace(np.nan,mean,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "b9487fc5",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['chronic_medic_condition']=df['chronic_medic_condition'].replace(to_replace='0',value=np.nan)\n",
    "df['chronic_medic_condition']=df['chronic_medic_condition'].astype(float)\n",
    "mean=df['chronic_medic_condition'].mean()\n",
    "df['chronic_medic_condition'].replace(np.nan,mean,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "e46dd370",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['cont_child_undr_6_mnths']=df['cont_child_undr_6_mnths'].replace(to_replace='0',value=np.nan)\n",
    "df['cont_child_undr_6_mnths']=df['cont_child_undr_6_mnths'].astype(float)\n",
    "mean=df['cont_child_undr_6_mnths'].mean()\n",
    "df['cont_child_undr_6_mnths'].replace(np.nan,mean,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "88fed5e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['is_health_worker']=df['is_health_worker'].replace(to_replace='0',value=np.nan)\n",
    "df['is_health_worker']=df['is_health_worker'].astype(float)\n",
    "mean=df['is_health_worker'].mean()\n",
    "df['is_health_worker'].replace(np.nan,mean,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "bb9e3615",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['has_health_insur']=df['has_health_insur'].replace(to_replace='0',value=np.nan)\n",
    "df['has_health_insur']=df['has_health_insur'].astype(float)\n",
    "mean=df['has_health_insur'].mean()\n",
    "df['has_health_insur'].replace(np.nan,mean,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "9f96ad93",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['is_h1n1_vacc_effective']=df['is_h1n1_vacc_effective'].replace(to_replace='0',value=np.nan)\n",
    "df['is_h1n1_vacc_effective']=df['is_h1n1_vacc_effective'].astype(float)\n",
    "mean=df['is_h1n1_vacc_effective'].mean()\n",
    "df['is_h1n1_vacc_effective'].replace(np.nan,mean,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "e415c503",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['is_h1n1_vacc_effective']=df['is_h1n1_vacc_effective'].replace(to_replace='0',value=np.nan)\n",
    "df['is_h1n1_vacc_effective']=df['is_h1n1_vacc_effective'].astype(float)\n",
    "mean=df['is_h1n1_vacc_effective'].mean()\n",
    "df['is_h1n1_vacc_effective'].replace(np.nan,mean,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "9f8874af",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['dr_recc_h1n1_vacc']=df['dr_recc_h1n1_vacc'].replace(to_replace='0',value=np.nan)\n",
    "df['dr_recc_h1n1_vacc']=df['dr_recc_h1n1_vacc'].astype(float)\n",
    "mean=df['dr_recc_h1n1_vacc'].mean()\n",
    "df['dr_recc_h1n1_vacc'].replace(np.nan,mean,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "4b289f87",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['dr_recc_seasonal_vacc']=df['dr_recc_seasonal_vacc'].replace(to_replace='0',value=np.nan)\n",
    "df['dr_recc_seasonal_vacc']=df['dr_recc_seasonal_vacc'].astype(float)\n",
    "mean=df['dr_recc_seasonal_vacc'].mean()\n",
    "df['dr_recc_seasonal_vacc'].replace(np.nan,mean,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "74b0b16b",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['cont_child_undr_6_mnths']=df['cont_child_undr_6_mnths'].replace(to_replace='0',value=np.nan)\n",
    "df['cont_child_undr_6_mnths']=df['cont_child_undr_6_mnths'].astype(float)\n",
    "mean=df['cont_child_undr_6_mnths'].mean()\n",
    "df['cont_child_undr_6_mnths'].replace(np.nan,mean,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "49147e74",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['is_h1n1_risky']=df['is_h1n1_risky'].replace(to_replace='0',value=np.nan)\n",
    "df['is_h1n1_risky']=df['is_h1n1_risky'].astype(float)\n",
    "mean=df['is_h1n1_risky'].mean()\n",
    "df['is_h1n1_risky'].replace(np.nan,mean,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "9d7d6074",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['sick_from_h1n1_vacc']=df['sick_from_h1n1_vacc'].replace(to_replace='0',value=np.nan)\n",
    "df['sick_from_h1n1_vacc']=df['sick_from_h1n1_vacc'].astype(float)\n",
    "mean=df['sick_from_h1n1_vacc'].mean()\n",
    "df['sick_from_h1n1_vacc'].replace(np.nan,mean,inplace=True) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "fd003b4e",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['is_seas_vacc_effective']=df['is_seas_vacc_effective'].replace(to_replace='0',value=np.nan)\n",
    "df['is_seas_vacc_effective']=df['is_seas_vacc_effective'].astype(float)\n",
    "mean=df['is_seas_vacc_effective'].mean()\n",
    "df['is_seas_vacc_effective'].replace(np.nan,mean,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "374ea49d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['is_seas_risky']=df['is_seas_risky'].replace(to_replace='0',value=np.nan)\n",
    "df['is_seas_risky']=df['is_seas_risky'].astype(float)\n",
    "mean=df['is_seas_risky'].mean()\n",
    "df['is_seas_risky'].replace(np.nan,mean,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "7b9797f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['sick_from_seas_vacc']=df['sick_from_seas_vacc'].replace(to_replace='0',value=np.nan)\n",
    "df['sick_from_seas_vacc']=df['sick_from_seas_vacc'].astype(float)\n",
    "mean=df['sick_from_seas_vacc'].mean()\n",
    "df['sick_from_seas_vacc'].replace(np.nan,mean,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "adbe8bb7",
   "metadata": {},
   "outputs": [],
   "source": [
    "mode=df[\"qualification\"].mode().values[0]\n",
    "df[\"qualification\"]=df[\"qualification\"].replace(np.nan,mode)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "dbf62599",
   "metadata": {},
   "outputs": [],
   "source": [
    "mode=df[\"income_level\"].mode().values[0]\n",
    "df[\"income_level\"]=df[\"income_level\"].replace(np.nan,mode)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "7ecd8c66",
   "metadata": {},
   "outputs": [],
   "source": [
    "mode=df[\"housing_status\"].mode().values[0]\n",
    "df[\"housing_status\"]=df[\"housing_status\"].replace(np.nan,mode)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "f90838f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "mode=df[\"employment\"].mode().values[0]\n",
    "df[\"employment\"]=df[\"employment\"].replace(np.nan,mode)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "a007e1c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['no_of_adults']=df['no_of_adults'].replace(to_replace='0',value=np.nan)\n",
    "df['no_of_adults']=df['no_of_adults'].astype(float)\n",
    "mean=df['no_of_adults'].mean()\n",
    "df['no_of_adults'].replace(np.nan,mean,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "250c249f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['no_of_children']=df['no_of_children'].replace(to_replace='0',value=np.nan)\n",
    "df['no_of_children']=df['no_of_children'].astype(float)\n",
    "mean=df['no_of_children'].mean()\n",
    "df['no_of_children'].replace(np.nan,mean,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "c983b102",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "unique_id                      int64\n",
       "h1n1_worry                   float64\n",
       "h1n1_awareness               float64\n",
       "antiviral_medication         float64\n",
       "contact_avoidance            float64\n",
       "bought_face_mask             float64\n",
       "wash_hands_frequently        float64\n",
       "avoid_large_gatherings       float64\n",
       "reduced_outside_home_cont    float64\n",
       "avoid_touch_face             float64\n",
       "dr_recc_h1n1_vacc            float64\n",
       "dr_recc_seasonal_vacc        float64\n",
       "chronic_medic_condition      float64\n",
       "cont_child_undr_6_mnths      float64\n",
       "is_health_worker             float64\n",
       "has_health_insur             float64\n",
       "is_h1n1_vacc_effective       float64\n",
       "is_h1n1_risky                float64\n",
       "sick_from_h1n1_vacc          float64\n",
       "is_seas_vacc_effective       float64\n",
       "is_seas_risky                float64\n",
       "sick_from_seas_vacc          float64\n",
       "age_bracket                   object\n",
       "qualification                 object\n",
       "race                          object\n",
       "sex                           object\n",
       "income_level                  object\n",
       "marital_status                object\n",
       "housing_status                object\n",
       "employment                    object\n",
       "census_msa                    object\n",
       "no_of_adults                 float64\n",
       "no_of_children               float64\n",
       "h1n1_vaccine                   int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "eb9fe674",
   "metadata": {},
   "outputs": [],
   "source": [
    "dummies=pd.get_dummies(df[['age_bracket','qualification','race','sex','income_level','marital_status','housing_status','employment','census_msa']],\n",
    "                       columns=['age_bracket','qualification','race','sex','income_level','marital_status','housing_status','employment','census_msa'],\n",
    "                       drop_first=True)\n",
    "df=pd.concat([df,dummies],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "fc18e786",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(26707, 53)"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "79c79ee1",
   "metadata": {},
   "outputs": [],
   "source": [
    "columns=['age_bracket','qualification','race','sex','income_level','marital_status','housing_status','employment','census_msa']\n",
    "df.drop(columns,axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "6b8ee811",
   "metadata": {},
   "outputs": [],
   "source": [
    "x=df.drop(['h1n1_vaccine'],axis=1)\n",
    "y=df[['h1n1_vaccine']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "25b54548",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.30,random_state=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "b020f010",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\sklearn\\utils\\validation.py:63: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  return f(*args, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg=LogisticRegression()\n",
    "reg.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "bc5c802c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8185514068685139"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg.score(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "6399bb0d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.824784724822164"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg.score(x_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "63580aec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>unique_id</th>\n",
       "      <th>h1n1_worry</th>\n",
       "      <th>h1n1_awareness</th>\n",
       "      <th>antiviral_medication</th>\n",
       "      <th>contact_avoidance</th>\n",
       "      <th>bought_face_mask</th>\n",
       "      <th>wash_hands_frequently</th>\n",
       "      <th>avoid_large_gatherings</th>\n",
       "      <th>reduced_outside_home_cont</th>\n",
       "      <th>avoid_touch_face</th>\n",
       "      <th>dr_recc_h1n1_vacc</th>\n",
       "      <th>dr_recc_seasonal_vacc</th>\n",
       "      <th>chronic_medic_condition</th>\n",
       "      <th>cont_child_undr_6_mnths</th>\n",
       "      <th>is_health_worker</th>\n",
       "      <th>has_health_insur</th>\n",
       "      <th>is_h1n1_vacc_effective</th>\n",
       "      <th>is_h1n1_risky</th>\n",
       "      <th>sick_from_h1n1_vacc</th>\n",
       "      <th>is_seas_vacc_effective</th>\n",
       "      <th>is_seas_risky</th>\n",
       "      <th>sick_from_seas_vacc</th>\n",
       "      <th>no_of_adults</th>\n",
       "      <th>no_of_children</th>\n",
       "      <th>h1n1_vaccine</th>\n",
       "      <th>age_bracket_35 - 44 Years</th>\n",
       "      <th>age_bracket_45 - 54 Years</th>\n",
       "      <th>age_bracket_55 - 64 Years</th>\n",
       "      <th>age_bracket_65+ Years</th>\n",
       "      <th>qualification_&lt; 12 Years</th>\n",
       "      <th>qualification_College Graduate</th>\n",
       "      <th>qualification_Some College</th>\n",
       "      <th>race_Hispanic</th>\n",
       "      <th>race_Other or Multiple</th>\n",
       "      <th>race_White</th>\n",
       "      <th>sex_Male</th>\n",
       "      <th>income_level_&gt; $75,000</th>\n",
       "      <th>income_level_Below Poverty</th>\n",
       "      <th>marital_status_Not Married</th>\n",
       "      <th>housing_status_Rent</th>\n",
       "      <th>employment_Not in Labor Force</th>\n",
       "      <th>employment_Unemployed</th>\n",
       "      <th>census_msa_MSA, Principle City</th>\n",
       "      <th>census_msa_Non-MSA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [unique_id, h1n1_worry, h1n1_awareness, antiviral_medication, contact_avoidance, bought_face_mask, wash_hands_frequently, avoid_large_gatherings, reduced_outside_home_cont, avoid_touch_face, dr_recc_h1n1_vacc, dr_recc_seasonal_vacc, chronic_medic_condition, cont_child_undr_6_mnths, is_health_worker, has_health_insur, is_h1n1_vacc_effective, is_h1n1_risky, sick_from_h1n1_vacc, is_seas_vacc_effective, is_seas_risky, sick_from_seas_vacc, no_of_adults, no_of_children, h1n1_vaccine, age_bracket_35 - 44 Years, age_bracket_45 - 54 Years, age_bracket_55 - 64 Years, age_bracket_65+ Years, qualification_< 12 Years, qualification_College Graduate, qualification_Some College, race_Hispanic, race_Other or Multiple, race_White, sex_Male, income_level_> $75,000, income_level_Below Poverty, marital_status_Not Married, housing_status_Rent, employment_Not in Labor Force, employment_Unemployed, census_msa_MSA, Principle City, census_msa_Non-MSA]\n",
       "Index: []"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "duplicate=df.duplicated()\n",
    "print(duplicate.sum())\n",
    "df[duplicate]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "8705ba5a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.drop_duplicates(inplace=True)\n",
    "dpl=df.duplicated()\n",
    "dpl.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "c2a94462",
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions=reg.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "619d8110",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.95      0.90      6330\n",
      "           1       0.65      0.37      0.47      1683\n",
      "\n",
      "    accuracy                           0.82      8013\n",
      "   macro avg       0.75      0.66      0.68      8013\n",
      "weighted avg       0.81      0.82      0.81      8013\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(metrics.classification_report(y_test,predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "1a95a266",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[5994,  336],\n",
       "       [1068,  615]], dtype=int64)"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "confusion_matrix(y_test,predictions)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "9c18b3e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "cm=metrics.confusion_matrix(y_test,predictions,labels=[1,0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "4fbb2b58",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_cm = pd.DataFrame(cm, index = [i for i in [\"1\",\"0\"]],\n",
    "                  columns = [i for i in [\"Predict 1\",\"Predict 0\"]])\n",
    "plt.figure(figsize = (7,5))\n",
    "sns.heatmap(df_cm,annot=True,fmt='g')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "e4d5e6b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from scipy.stats import zscore"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "ac7e1423",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>unique_id</th>\n",
       "      <th>h1n1_worry</th>\n",
       "      <th>h1n1_awareness</th>\n",
       "      <th>antiviral_medication</th>\n",
       "      <th>contact_avoidance</th>\n",
       "      <th>bought_face_mask</th>\n",
       "      <th>wash_hands_frequently</th>\n",
       "      <th>avoid_large_gatherings</th>\n",
       "      <th>reduced_outside_home_cont</th>\n",
       "      <th>avoid_touch_face</th>\n",
       "      <th>dr_recc_h1n1_vacc</th>\n",
       "      <th>dr_recc_seasonal_vacc</th>\n",
       "      <th>chronic_medic_condition</th>\n",
       "      <th>cont_child_undr_6_mnths</th>\n",
       "      <th>is_health_worker</th>\n",
       "      <th>has_health_insur</th>\n",
       "      <th>is_h1n1_vacc_effective</th>\n",
       "      <th>is_h1n1_risky</th>\n",
       "      <th>sick_from_h1n1_vacc</th>\n",
       "      <th>is_seas_vacc_effective</th>\n",
       "      <th>is_seas_risky</th>\n",
       "      <th>sick_from_seas_vacc</th>\n",
       "      <th>no_of_adults</th>\n",
       "      <th>no_of_children</th>\n",
       "      <th>age_bracket_35 - 44 Years</th>\n",
       "      <th>age_bracket_45 - 54 Years</th>\n",
       "      <th>age_bracket_55 - 64 Years</th>\n",
       "      <th>age_bracket_65+ Years</th>\n",
       "      <th>qualification_&lt; 12 Years</th>\n",
       "      <th>qualification_College Graduate</th>\n",
       "      <th>qualification_Some College</th>\n",
       "      <th>race_Hispanic</th>\n",
       "      <th>race_Other or Multiple</th>\n",
       "      <th>race_White</th>\n",
       "      <th>sex_Male</th>\n",
       "      <th>income_level_&gt; $75,000</th>\n",
       "      <th>income_level_Below Poverty</th>\n",
       "      <th>marital_status_Not Married</th>\n",
       "      <th>housing_status_Rent</th>\n",
       "      <th>employment_Not in Labor Force</th>\n",
       "      <th>employment_Unemployed</th>\n",
       "      <th>census_msa_MSA, Principle City</th>\n",
       "      <th>census_msa_Non-MSA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "      <td>2.670700e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>-1.205877e-16</td>\n",
       "      <td>-1.168646e-15</td>\n",
       "      <td>-4.691978e-16</td>\n",
       "      <td>4.489155e-16</td>\n",
       "      <td>4.089912e-16</td>\n",
       "      <td>1.163836e-15</td>\n",
       "      <td>1.242525e-15</td>\n",
       "      <td>5.161059e-16</td>\n",
       "      <td>-1.763412e-15</td>\n",
       "      <td>1.097852e-15</td>\n",
       "      <td>-2.844087e-16</td>\n",
       "      <td>-4.337880e-16</td>\n",
       "      <td>-2.081235e-15</td>\n",
       "      <td>1.331469e-15</td>\n",
       "      <td>1.560556e-17</td>\n",
       "      <td>7.387575e-16</td>\n",
       "      <td>6.263176e-16</td>\n",
       "      <td>-9.298487e-17</td>\n",
       "      <td>8.011714e-16</td>\n",
       "      <td>-1.236040e-15</td>\n",
       "      <td>5.653586e-17</td>\n",
       "      <td>1.637723e-15</td>\n",
       "      <td>4.058963e-16</td>\n",
       "      <td>-1.739758e-15</td>\n",
       "      <td>1.896612e-16</td>\n",
       "      <td>6.851939e-16</td>\n",
       "      <td>1.053113e-15</td>\n",
       "      <td>1.785112e-15</td>\n",
       "      <td>1.572878e-15</td>\n",
       "      <td>1.570309e-15</td>\n",
       "      <td>1.099240e-15</td>\n",
       "      <td>2.008166e-16</td>\n",
       "      <td>-3.466147e-16</td>\n",
       "      <td>-6.435112e-17</td>\n",
       "      <td>1.786783e-16</td>\n",
       "      <td>1.672796e-17</td>\n",
       "      <td>-5.917351e-16</td>\n",
       "      <td>6.118760e-16</td>\n",
       "      <td>-2.116125e-15</td>\n",
       "      <td>-5.836247e-16</td>\n",
       "      <td>2.841320e-15</td>\n",
       "      <td>7.760794e-16</td>\n",
       "      <td>1.938640e-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "      <td>1.000019e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-1.731986e+00</td>\n",
       "      <td>-1.781053e+00</td>\n",
       "      <td>-2.046928e+00</td>\n",
       "      <td>-2.269114e-01</td>\n",
       "      <td>-1.632555e+00</td>\n",
       "      <td>-2.722980e-01</td>\n",
       "      <td>-2.177583e+00</td>\n",
       "      <td>-7.490091e-01</td>\n",
       "      <td>-7.145483e-01</td>\n",
       "      <td>-1.452107e+00</td>\n",
       "      <td>-5.544624e-01</td>\n",
       "      <td>-7.315978e-01</td>\n",
       "      <td>-6.404050e-01</td>\n",
       "      <td>-3.047564e-01</td>\n",
       "      <td>-3.604624e-01</td>\n",
       "      <td>-3.678832e+00</td>\n",
       "      <td>-2.850581e+00</td>\n",
       "      <td>-1.052050e+00</td>\n",
       "      <td>-1.003729e+00</td>\n",
       "      <td>-2.809369e+00</td>\n",
       "      <td>-1.253366e+00</td>\n",
       "      <td>-8.474042e-01</td>\n",
       "      <td>-1.182177e+00</td>\n",
       "      <td>-5.786666e-01</td>\n",
       "      <td>-4.102881e-01</td>\n",
       "      <td>-4.939430e-01</td>\n",
       "      <td>-5.129334e-01</td>\n",
       "      <td>-5.869349e-01</td>\n",
       "      <td>-3.115558e-01</td>\n",
       "      <td>-8.698809e-01</td>\n",
       "      <td>-5.984707e-01</td>\n",
       "      <td>-2.652075e-01</td>\n",
       "      <td>-2.534480e-01</td>\n",
       "      <td>-1.967002e+00</td>\n",
       "      <td>-8.271240e-01</td>\n",
       "      <td>-5.850322e-01</td>\n",
       "      <td>-3.351540e-01</td>\n",
       "      <td>-8.859285e-01</td>\n",
       "      <td>-5.341815e-01</td>\n",
       "      <td>-7.880126e-01</td>\n",
       "      <td>-2.398655e-01</td>\n",
       "      <td>-6.460211e-01</td>\n",
       "      <td>-6.074191e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-8.659930e-01</td>\n",
       "      <td>-6.806088e-01</td>\n",
       "      <td>-4.256406e-01</td>\n",
       "      <td>-2.269114e-01</td>\n",
       "      <td>-1.632555e+00</td>\n",
       "      <td>-2.722980e-01</td>\n",
       "      <td>4.599482e-01</td>\n",
       "      <td>-7.490091e-01</td>\n",
       "      <td>-7.145483e-01</td>\n",
       "      <td>-1.452107e+00</td>\n",
       "      <td>-5.544624e-01</td>\n",
       "      <td>-7.315978e-01</td>\n",
       "      <td>-6.404050e-01</td>\n",
       "      <td>-3.047564e-01</td>\n",
       "      <td>-3.604624e-01</td>\n",
       "      <td>9.285508e-16</td>\n",
       "      <td>-8.506105e-01</td>\n",
       "      <td>-1.052050e+00</td>\n",
       "      <td>-1.003729e+00</td>\n",
       "      <td>-2.412569e-02</td>\n",
       "      <td>-5.243094e-01</td>\n",
       "      <td>-8.474042e-01</td>\n",
       "      <td>-1.182177e+00</td>\n",
       "      <td>-5.786666e-01</td>\n",
       "      <td>-4.102881e-01</td>\n",
       "      <td>-4.939430e-01</td>\n",
       "      <td>-5.129334e-01</td>\n",
       "      <td>-5.869349e-01</td>\n",
       "      <td>-3.115558e-01</td>\n",
       "      <td>-8.698809e-01</td>\n",
       "      <td>-5.984707e-01</td>\n",
       "      <td>-2.652075e-01</td>\n",
       "      <td>-2.534480e-01</td>\n",
       "      <td>5.083878e-01</td>\n",
       "      <td>-8.271240e-01</td>\n",
       "      <td>-5.850322e-01</td>\n",
       "      <td>-3.351540e-01</td>\n",
       "      <td>-8.859285e-01</td>\n",
       "      <td>-5.341815e-01</td>\n",
       "      <td>-7.880126e-01</td>\n",
       "      <td>-2.398655e-01</td>\n",
       "      <td>-6.460211e-01</td>\n",
       "      <td>-6.074191e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>4.198349e-01</td>\n",
       "      <td>-4.256406e-01</td>\n",
       "      <td>-2.269114e-01</td>\n",
       "      <td>6.173448e-01</td>\n",
       "      <td>-2.722980e-01</td>\n",
       "      <td>4.599482e-01</td>\n",
       "      <td>-7.490091e-01</td>\n",
       "      <td>-7.145483e-01</td>\n",
       "      <td>6.919711e-01</td>\n",
       "      <td>-5.544624e-01</td>\n",
       "      <td>-7.315978e-01</td>\n",
       "      <td>-6.404050e-01</td>\n",
       "      <td>-3.047564e-01</td>\n",
       "      <td>-3.604624e-01</td>\n",
       "      <td>9.285508e-16</td>\n",
       "      <td>1.493746e-01</td>\n",
       "      <td>-2.684388e-01</td>\n",
       "      <td>-2.644262e-01</td>\n",
       "      <td>-2.412569e-02</td>\n",
       "      <td>-5.243094e-01</td>\n",
       "      <td>-8.951595e-02</td>\n",
       "      <td>1.513570e-01</td>\n",
       "      <td>-5.786666e-01</td>\n",
       "      <td>-4.102881e-01</td>\n",
       "      <td>-4.939430e-01</td>\n",
       "      <td>-5.129334e-01</td>\n",
       "      <td>-5.869349e-01</td>\n",
       "      <td>-3.115558e-01</td>\n",
       "      <td>-8.698809e-01</td>\n",
       "      <td>-5.984707e-01</td>\n",
       "      <td>-2.652075e-01</td>\n",
       "      <td>-2.534480e-01</td>\n",
       "      <td>5.083878e-01</td>\n",
       "      <td>-8.271240e-01</td>\n",
       "      <td>-5.850322e-01</td>\n",
       "      <td>-3.351540e-01</td>\n",
       "      <td>-8.859285e-01</td>\n",
       "      <td>-5.341815e-01</td>\n",
       "      <td>-7.880126e-01</td>\n",
       "      <td>-2.398655e-01</td>\n",
       "      <td>-6.460211e-01</td>\n",
       "      <td>-6.074191e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>8.659930e-01</td>\n",
       "      <td>4.198349e-01</td>\n",
       "      <td>1.195647e+00</td>\n",
       "      <td>-2.269114e-01</td>\n",
       "      <td>6.173448e-01</td>\n",
       "      <td>-2.722980e-01</td>\n",
       "      <td>4.599482e-01</td>\n",
       "      <td>1.339461e+00</td>\n",
       "      <td>1.403796e+00</td>\n",
       "      <td>6.919711e-01</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.487148e+00</td>\n",
       "      <td>1.620427e+00</td>\n",
       "      <td>-3.047564e-01</td>\n",
       "      <td>-3.604624e-01</td>\n",
       "      <td>5.029891e-01</td>\n",
       "      <td>1.149360e+00</td>\n",
       "      <td>1.298784e+00</td>\n",
       "      <td>1.214180e+00</td>\n",
       "      <td>9.042887e-01</td>\n",
       "      <td>9.338035e-01</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.513570e-01</td>\n",
       "      <td>5.037967e-01</td>\n",
       "      <td>-4.102881e-01</td>\n",
       "      <td>-4.939430e-01</td>\n",
       "      <td>-5.129334e-01</td>\n",
       "      <td>1.703767e+00</td>\n",
       "      <td>-3.115558e-01</td>\n",
       "      <td>1.149583e+00</td>\n",
       "      <td>1.670926e+00</td>\n",
       "      <td>-2.652075e-01</td>\n",
       "      <td>-2.534480e-01</td>\n",
       "      <td>5.083878e-01</td>\n",
       "      <td>1.209008e+00</td>\n",
       "      <td>1.709308e+00</td>\n",
       "      <td>-3.351540e-01</td>\n",
       "      <td>1.128759e+00</td>\n",
       "      <td>-5.341815e-01</td>\n",
       "      <td>1.269015e+00</td>\n",
       "      <td>-2.398655e-01</td>\n",
       "      <td>1.547937e+00</td>\n",
       "      <td>1.646310e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.731986e+00</td>\n",
       "      <td>1.520279e+00</td>\n",
       "      <td>1.195647e+00</td>\n",
       "      <td>4.418754e+00</td>\n",
       "      <td>6.173448e-01</td>\n",
       "      <td>3.675062e+00</td>\n",
       "      <td>4.599482e-01</td>\n",
       "      <td>1.339461e+00</td>\n",
       "      <td>1.403796e+00</td>\n",
       "      <td>6.919711e-01</td>\n",
       "      <td>1.962251e+00</td>\n",
       "      <td>1.487148e+00</td>\n",
       "      <td>1.620427e+00</td>\n",
       "      <td>3.385248e+00</td>\n",
       "      <td>2.860323e+00</td>\n",
       "      <td>5.029891e-01</td>\n",
       "      <td>1.149360e+00</td>\n",
       "      <td>2.082395e+00</td>\n",
       "      <td>1.953484e+00</td>\n",
       "      <td>9.042887e-01</td>\n",
       "      <td>1.662860e+00</td>\n",
       "      <td>2.184149e+00</td>\n",
       "      <td>2.818426e+00</td>\n",
       "      <td>2.668723e+00</td>\n",
       "      <td>2.437312e+00</td>\n",
       "      <td>2.024525e+00</td>\n",
       "      <td>1.949571e+00</td>\n",
       "      <td>1.703767e+00</td>\n",
       "      <td>3.209698e+00</td>\n",
       "      <td>1.149583e+00</td>\n",
       "      <td>1.670926e+00</td>\n",
       "      <td>3.770632e+00</td>\n",
       "      <td>3.945582e+00</td>\n",
       "      <td>5.083878e-01</td>\n",
       "      <td>1.209008e+00</td>\n",
       "      <td>1.709308e+00</td>\n",
       "      <td>2.983703e+00</td>\n",
       "      <td>1.128759e+00</td>\n",
       "      <td>1.872023e+00</td>\n",
       "      <td>1.269015e+00</td>\n",
       "      <td>4.169004e+00</td>\n",
       "      <td>1.547937e+00</td>\n",
       "      <td>1.646310e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          unique_id    h1n1_worry  h1n1_awareness  antiviral_medication  \\\n",
       "count  2.670700e+04  2.670700e+04    2.670700e+04          2.670700e+04   \n",
       "mean  -1.205877e-16 -1.168646e-15   -4.691978e-16          4.489155e-16   \n",
       "std    1.000019e+00  1.000019e+00    1.000019e+00          1.000019e+00   \n",
       "min   -1.731986e+00 -1.781053e+00   -2.046928e+00         -2.269114e-01   \n",
       "25%   -8.659930e-01 -6.806088e-01   -4.256406e-01         -2.269114e-01   \n",
       "50%    0.000000e+00  4.198349e-01   -4.256406e-01         -2.269114e-01   \n",
       "75%    8.659930e-01  4.198349e-01    1.195647e+00         -2.269114e-01   \n",
       "max    1.731986e+00  1.520279e+00    1.195647e+00          4.418754e+00   \n",
       "\n",
       "       contact_avoidance  bought_face_mask  wash_hands_frequently  \\\n",
       "count       2.670700e+04      2.670700e+04           2.670700e+04   \n",
       "mean        4.089912e-16      1.163836e-15           1.242525e-15   \n",
       "std         1.000019e+00      1.000019e+00           1.000019e+00   \n",
       "min        -1.632555e+00     -2.722980e-01          -2.177583e+00   \n",
       "25%        -1.632555e+00     -2.722980e-01           4.599482e-01   \n",
       "50%         6.173448e-01     -2.722980e-01           4.599482e-01   \n",
       "75%         6.173448e-01     -2.722980e-01           4.599482e-01   \n",
       "max         6.173448e-01      3.675062e+00           4.599482e-01   \n",
       "\n",
       "       avoid_large_gatherings  reduced_outside_home_cont  avoid_touch_face  \\\n",
       "count            2.670700e+04               2.670700e+04      2.670700e+04   \n",
       "mean             5.161059e-16              -1.763412e-15      1.097852e-15   \n",
       "std              1.000019e+00               1.000019e+00      1.000019e+00   \n",
       "min             -7.490091e-01              -7.145483e-01     -1.452107e+00   \n",
       "25%             -7.490091e-01              -7.145483e-01     -1.452107e+00   \n",
       "50%             -7.490091e-01              -7.145483e-01      6.919711e-01   \n",
       "75%              1.339461e+00               1.403796e+00      6.919711e-01   \n",
       "max              1.339461e+00               1.403796e+00      6.919711e-01   \n",
       "\n",
       "       dr_recc_h1n1_vacc  dr_recc_seasonal_vacc  chronic_medic_condition  \\\n",
       "count       2.670700e+04           2.670700e+04             2.670700e+04   \n",
       "mean       -2.844087e-16          -4.337880e-16            -2.081235e-15   \n",
       "std         1.000019e+00           1.000019e+00             1.000019e+00   \n",
       "min        -5.544624e-01          -7.315978e-01            -6.404050e-01   \n",
       "25%        -5.544624e-01          -7.315978e-01            -6.404050e-01   \n",
       "50%        -5.544624e-01          -7.315978e-01            -6.404050e-01   \n",
       "75%         0.000000e+00           1.487148e+00             1.620427e+00   \n",
       "max         1.962251e+00           1.487148e+00             1.620427e+00   \n",
       "\n",
       "       cont_child_undr_6_mnths  is_health_worker  has_health_insur  \\\n",
       "count             2.670700e+04      2.670700e+04      2.670700e+04   \n",
       "mean              1.331469e-15      1.560556e-17      7.387575e-16   \n",
       "std               1.000019e+00      1.000019e+00      1.000019e+00   \n",
       "min              -3.047564e-01     -3.604624e-01     -3.678832e+00   \n",
       "25%              -3.047564e-01     -3.604624e-01      9.285508e-16   \n",
       "50%              -3.047564e-01     -3.604624e-01      9.285508e-16   \n",
       "75%              -3.047564e-01     -3.604624e-01      5.029891e-01   \n",
       "max               3.385248e+00      2.860323e+00      5.029891e-01   \n",
       "\n",
       "       is_h1n1_vacc_effective  is_h1n1_risky  sick_from_h1n1_vacc  \\\n",
       "count            2.670700e+04   2.670700e+04         2.670700e+04   \n",
       "mean             6.263176e-16  -9.298487e-17         8.011714e-16   \n",
       "std              1.000019e+00   1.000019e+00         1.000019e+00   \n",
       "min             -2.850581e+00  -1.052050e+00        -1.003729e+00   \n",
       "25%             -8.506105e-01  -1.052050e+00        -1.003729e+00   \n",
       "50%              1.493746e-01  -2.684388e-01        -2.644262e-01   \n",
       "75%              1.149360e+00   1.298784e+00         1.214180e+00   \n",
       "max              1.149360e+00   2.082395e+00         1.953484e+00   \n",
       "\n",
       "       is_seas_vacc_effective  is_seas_risky  sick_from_seas_vacc  \\\n",
       "count            2.670700e+04   2.670700e+04         2.670700e+04   \n",
       "mean            -1.236040e-15   5.653586e-17         1.637723e-15   \n",
       "std              1.000019e+00   1.000019e+00         1.000019e+00   \n",
       "min             -2.809369e+00  -1.253366e+00        -8.474042e-01   \n",
       "25%             -2.412569e-02  -5.243094e-01        -8.474042e-01   \n",
       "50%             -2.412569e-02  -5.243094e-01        -8.951595e-02   \n",
       "75%              9.042887e-01   9.338035e-01         0.000000e+00   \n",
       "max              9.042887e-01   1.662860e+00         2.184149e+00   \n",
       "\n",
       "       no_of_adults  no_of_children  age_bracket_35 - 44 Years  \\\n",
       "count  2.670700e+04    2.670700e+04               2.670700e+04   \n",
       "mean   4.058963e-16   -1.739758e-15               1.896612e-16   \n",
       "std    1.000019e+00    1.000019e+00               1.000019e+00   \n",
       "min   -1.182177e+00   -5.786666e-01              -4.102881e-01   \n",
       "25%   -1.182177e+00   -5.786666e-01              -4.102881e-01   \n",
       "50%    1.513570e-01   -5.786666e-01              -4.102881e-01   \n",
       "75%    1.513570e-01    5.037967e-01              -4.102881e-01   \n",
       "max    2.818426e+00    2.668723e+00               2.437312e+00   \n",
       "\n",
       "       age_bracket_45 - 54 Years  age_bracket_55 - 64 Years  \\\n",
       "count               2.670700e+04               2.670700e+04   \n",
       "mean                6.851939e-16               1.053113e-15   \n",
       "std                 1.000019e+00               1.000019e+00   \n",
       "min                -4.939430e-01              -5.129334e-01   \n",
       "25%                -4.939430e-01              -5.129334e-01   \n",
       "50%                -4.939430e-01              -5.129334e-01   \n",
       "75%                -4.939430e-01              -5.129334e-01   \n",
       "max                 2.024525e+00               1.949571e+00   \n",
       "\n",
       "       age_bracket_65+ Years  qualification_< 12 Years  \\\n",
       "count           2.670700e+04              2.670700e+04   \n",
       "mean            1.785112e-15              1.572878e-15   \n",
       "std             1.000019e+00              1.000019e+00   \n",
       "min            -5.869349e-01             -3.115558e-01   \n",
       "25%            -5.869349e-01             -3.115558e-01   \n",
       "50%            -5.869349e-01             -3.115558e-01   \n",
       "75%             1.703767e+00             -3.115558e-01   \n",
       "max             1.703767e+00              3.209698e+00   \n",
       "\n",
       "       qualification_College Graduate  qualification_Some College  \\\n",
       "count                    2.670700e+04                2.670700e+04   \n",
       "mean                     1.570309e-15                1.099240e-15   \n",
       "std                      1.000019e+00                1.000019e+00   \n",
       "min                     -8.698809e-01               -5.984707e-01   \n",
       "25%                     -8.698809e-01               -5.984707e-01   \n",
       "50%                     -8.698809e-01               -5.984707e-01   \n",
       "75%                      1.149583e+00                1.670926e+00   \n",
       "max                      1.149583e+00                1.670926e+00   \n",
       "\n",
       "       race_Hispanic  race_Other or Multiple    race_White      sex_Male  \\\n",
       "count   2.670700e+04            2.670700e+04  2.670700e+04  2.670700e+04   \n",
       "mean    2.008166e-16           -3.466147e-16 -6.435112e-17  1.786783e-16   \n",
       "std     1.000019e+00            1.000019e+00  1.000019e+00  1.000019e+00   \n",
       "min    -2.652075e-01           -2.534480e-01 -1.967002e+00 -8.271240e-01   \n",
       "25%    -2.652075e-01           -2.534480e-01  5.083878e-01 -8.271240e-01   \n",
       "50%    -2.652075e-01           -2.534480e-01  5.083878e-01 -8.271240e-01   \n",
       "75%    -2.652075e-01           -2.534480e-01  5.083878e-01  1.209008e+00   \n",
       "max     3.770632e+00            3.945582e+00  5.083878e-01  1.209008e+00   \n",
       "\n",
       "       income_level_> $75,000  income_level_Below Poverty  \\\n",
       "count            2.670700e+04                2.670700e+04   \n",
       "mean             1.672796e-17               -5.917351e-16   \n",
       "std              1.000019e+00                1.000019e+00   \n",
       "min             -5.850322e-01               -3.351540e-01   \n",
       "25%             -5.850322e-01               -3.351540e-01   \n",
       "50%             -5.850322e-01               -3.351540e-01   \n",
       "75%              1.709308e+00               -3.351540e-01   \n",
       "max              1.709308e+00                2.983703e+00   \n",
       "\n",
       "       marital_status_Not Married  housing_status_Rent  \\\n",
       "count                2.670700e+04         2.670700e+04   \n",
       "mean                 6.118760e-16        -2.116125e-15   \n",
       "std                  1.000019e+00         1.000019e+00   \n",
       "min                 -8.859285e-01        -5.341815e-01   \n",
       "25%                 -8.859285e-01        -5.341815e-01   \n",
       "50%                 -8.859285e-01        -5.341815e-01   \n",
       "75%                  1.128759e+00        -5.341815e-01   \n",
       "max                  1.128759e+00         1.872023e+00   \n",
       "\n",
       "       employment_Not in Labor Force  employment_Unemployed  \\\n",
       "count                   2.670700e+04           2.670700e+04   \n",
       "mean                   -5.836247e-16           2.841320e-15   \n",
       "std                     1.000019e+00           1.000019e+00   \n",
       "min                    -7.880126e-01          -2.398655e-01   \n",
       "25%                    -7.880126e-01          -2.398655e-01   \n",
       "50%                    -7.880126e-01          -2.398655e-01   \n",
       "75%                     1.269015e+00          -2.398655e-01   \n",
       "max                     1.269015e+00           4.169004e+00   \n",
       "\n",
       "       census_msa_MSA, Principle City  census_msa_Non-MSA  \n",
       "count                    2.670700e+04        2.670700e+04  \n",
       "mean                     7.760794e-16        1.938640e-16  \n",
       "std                      1.000019e+00        1.000019e+00  \n",
       "min                     -6.460211e-01       -6.074191e-01  \n",
       "25%                     -6.460211e-01       -6.074191e-01  \n",
       "50%                     -6.460211e-01       -6.074191e-01  \n",
       "75%                      1.547937e+00        1.646310e+00  \n",
       "max                      1.547937e+00        1.646310e+00  "
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xscaled=x.apply(zscore)\n",
    "xscaled.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "88dbe04f",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train,x_test,y_train,y_test=train_test_split(xscaled,y,test_size=0.30,random_state=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "a58412e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "NNH=KNeighborsClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "21aba7fd",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\sklearn\\neighbors\\_classification.py:179: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  return self._fit(X, y)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier()"
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NNH.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "8c6d8580",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8103082490952203"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predicted_labels=NNH.predict(x_test)\n",
    "NNH.score(x_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "id": "a842cb07",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8555151385471275"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NNH.score(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "id": "f496a8b1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "unique_id                         0\n",
       "h1n1_worry                        0\n",
       "h1n1_awareness                    0\n",
       "antiviral_medication              0\n",
       "contact_avoidance                 0\n",
       "bought_face_mask                  0\n",
       "wash_hands_frequently             0\n",
       "avoid_large_gatherings            0\n",
       "reduced_outside_home_cont         0\n",
       "avoid_touch_face                  0\n",
       "dr_recc_h1n1_vacc                 0\n",
       "dr_recc_seasonal_vacc             0\n",
       "chronic_medic_condition           0\n",
       "cont_child_undr_6_mnths           0\n",
       "is_health_worker                  0\n",
       "has_health_insur                  0\n",
       "is_h1n1_vacc_effective            0\n",
       "is_h1n1_risky                     0\n",
       "sick_from_h1n1_vacc               0\n",
       "is_seas_vacc_effective            0\n",
       "is_seas_risky                     0\n",
       "sick_from_seas_vacc               0\n",
       "no_of_adults                      0\n",
       "no_of_children                    0\n",
       "h1n1_vaccine                      0\n",
       "age_bracket_35 - 44 Years         0\n",
       "age_bracket_45 - 54 Years         0\n",
       "age_bracket_55 - 64 Years         0\n",
       "age_bracket_65+ Years             0\n",
       "qualification_< 12 Years          0\n",
       "qualification_College Graduate    0\n",
       "qualification_Some College        0\n",
       "race_Hispanic                     0\n",
       "race_Other or Multiple            0\n",
       "race_White                        0\n",
       "sex_Male                          0\n",
       "income_level_> $75,000            0\n",
       "income_level_Below Poverty        0\n",
       "marital_status_Not Married        0\n",
       "housing_status_Rent               0\n",
       "employment_Not in Labor Force     0\n",
       "employment_Unemployed             0\n",
       "census_msa_MSA, Principle City    0\n",
       "census_msa_Non-MSA                0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "id": "09bbe6f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\sklearn\\utils\\validation.py:63: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  return f(*args, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GaussianNB(var_smoothing=1)"
      ]
     },
     "execution_count": 235,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.naive_bayes import GaussianNB\n",
    "nn=GaussianNB( var_smoothing=1)\n",
    "nn.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "id": "23bec025",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.820167228254087"
      ]
     },
     "execution_count": 236,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predicted_labels=nn.predict(x_test)\n",
    "nn.score(x_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "id": "7e8e2c99",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8114368246496202"
      ]
     },
     "execution_count": 237,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nn.score(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "id": "996cae1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df3=pd.read_csv('https://raw.githubusercontent.com/Premalatha-success/Datasets/main/TaxiFare.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "id": "2e9273d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>unique_id</th>\n",
       "      <th>amount</th>\n",
       "      <th>date_time_of_pickup</th>\n",
       "      <th>longitude_of_pickup</th>\n",
       "      <th>latitude_of_pickup</th>\n",
       "      <th>longitude_of_dropoff</th>\n",
       "      <th>latitude_of_dropoff</th>\n",
       "      <th>no_of_passenger</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>26:21.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2009-06-15 17:26:21 UTC</td>\n",
       "      <td>-73.844311</td>\n",
       "      <td>40.721319</td>\n",
       "      <td>-73.841610</td>\n",
       "      <td>40.712278</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>52:16.0</td>\n",
       "      <td>16.9</td>\n",
       "      <td>2010-01-05 16:52:16 UTC</td>\n",
       "      <td>-74.016048</td>\n",
       "      <td>40.711303</td>\n",
       "      <td>-73.979268</td>\n",
       "      <td>40.782004</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>35:00.0</td>\n",
       "      <td>5.7</td>\n",
       "      <td>2011-08-18 00:35:00 UTC</td>\n",
       "      <td>-73.982738</td>\n",
       "      <td>40.761270</td>\n",
       "      <td>-73.991242</td>\n",
       "      <td>40.750562</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>30:42.0</td>\n",
       "      <td>7.7</td>\n",
       "      <td>2012-04-21 04:30:42 UTC</td>\n",
       "      <td>-73.987130</td>\n",
       "      <td>40.733143</td>\n",
       "      <td>-73.991567</td>\n",
       "      <td>40.758092</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>51:00.0</td>\n",
       "      <td>5.3</td>\n",
       "      <td>2010-03-09 07:51:00 UTC</td>\n",
       "      <td>-73.968095</td>\n",
       "      <td>40.768008</td>\n",
       "      <td>-73.956655</td>\n",
       "      <td>40.783762</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  unique_id  amount      date_time_of_pickup  longitude_of_pickup  \\\n",
       "0   26:21.0     4.5  2009-06-15 17:26:21 UTC           -73.844311   \n",
       "1   52:16.0    16.9  2010-01-05 16:52:16 UTC           -74.016048   \n",
       "2   35:00.0     5.7  2011-08-18 00:35:00 UTC           -73.982738   \n",
       "3   30:42.0     7.7  2012-04-21 04:30:42 UTC           -73.987130   \n",
       "4   51:00.0     5.3  2010-03-09 07:51:00 UTC           -73.968095   \n",
       "\n",
       "   latitude_of_pickup  longitude_of_dropoff  latitude_of_dropoff  \\\n",
       "0           40.721319            -73.841610            40.712278   \n",
       "1           40.711303            -73.979268            40.782004   \n",
       "2           40.761270            -73.991242            40.750562   \n",
       "3           40.733143            -73.991567            40.758092   \n",
       "4           40.768008            -73.956655            40.783762   \n",
       "\n",
       "   no_of_passenger  \n",
       "0                1  \n",
       "1                1  \n",
       "2                2  \n",
       "3                1  \n",
       "4                1  "
      ]
     },
     "execution_count": 242,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "id": "65bc13c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(50000, 8)"
      ]
     },
     "execution_count": 243,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b9ae3134",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "abc9af5d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
